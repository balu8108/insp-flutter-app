// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/common/model/lecture_card_model.dart';
import 'package:inspflutterfrontend/data/remote/models/upcomingclasses/lecture_detail_by_roomid_response_model.dart';
import 'package:inspflutterfrontend/data/remote/remote_data_source.dart';
import 'package:inspflutterfrontend/lecturedetail/lecture_detail_screen.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'lecture_detail_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'home_redux.g.dart';

@freezed
class LectureDetailAppState with _$LectureDetailAppState {
  const factory LectureDetailAppState(
      {required LectureCardModel selectedItem,
      @Default(0) question,
      @Default(AllLecturesData(
          questionLogCount: 0,
          liveClassRoom: LecturesDetailResponseModelData()))
      AllLecturesData lectureData,
      @Default('') String query}) = _LectureDetailAppState;
}

LectureDetailAppState lectureDetailReducer(
    LectureDetailAppState state, dynamic action) {
  var upState = _lectureDetailReducer(state, action);
  if (kDebugMode) {}
  return upState;
}

sealed class LectureDetailAction {}

class UpdateQueryText extends LectureDetailAction {
  String query;

  UpdateQueryText({required this.query});
}

class UpdateLectureData extends LectureDetailAction {
  AllLecturesData lectureDataRes;

  UpdateLectureData({required this.lectureDataRes});
}

LectureDetailAppState _lectureDetailReducer(
    LectureDetailAppState state, LectureDetailAction action) {
  switch (action) {
    case UpdateQueryText():
      return state.copyWith(query: action.query);
    case UpdateLectureData():
      return state.copyWith(lectureData: action.lectureDataRes);
  }
}

ThunkAction<LectureDetailAppState> showLectureDetail(
    BuildContext context, LectureCardModel lecture) {
  return (Store<LectureDetailAppState> store) async {
    final remoteDataSource = RemoteDataSource();
    const token = 'Token 7e7caea58181517cdef5992796eafecb';
    final lectureDetail =
        await remoteDataSource.getLecturesDetailByRoomId(lecture.roomId, token);
    if (lectureDetail.response.statusCode == 200) {
      final lecturesDetailResponse = lectureDetail.data.data;

      LectureDetailScreen.dispatch(
          context, UpdateLectureData(lectureDataRes: lecturesDetailResponse));
    } else {}
  };
}

ThunkAction<LectureDetailAppState> initialFetchLectureDetail(
    BuildContext context) {
  return (Store<LectureDetailAppState> store) async {
    LectureDetailScreen.dispatch(
        context, showLectureDetail(context, store.state.selectedItem));
  };
}
