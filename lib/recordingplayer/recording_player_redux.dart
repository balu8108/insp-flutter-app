// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/common/model/recording_player_card_model.dart';
import 'package:inspflutterfrontend/recordingplayer/recording_player_screen.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'recording_player_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'home_redux.g.dart';

@freezed
class RecordingPlayerAppState with _$RecordingPlayerAppState {
  const factory RecordingPlayerAppState(
      {required RecordingPlayerCard selectedItem}) = _RecordingPlayerAppState;
}

RecordingPlayerAppState recordingPlayerReducer(
    RecordingPlayerAppState state, dynamic action) {
  var upState = _recordingPlayerReducer(state, action);
  if (kDebugMode) {}
  return upState;
}

sealed class RecordingPlayerAction {}

RecordingPlayerAppState _recordingPlayerReducer(
    RecordingPlayerAppState state, RecordingPlayerAction action) {
  switch (action) {
    case UpdateSelectedItem():
      return state.copyWith(selectedItem: action.selectedItem);
  }
}

class UpdateSelectedItem extends RecordingPlayerAction {
  RecordingPlayerCard selectedItem;

  UpdateSelectedItem({required this.selectedItem});
}

ThunkAction<RecordingPlayerAppState> selectRecordingData(
    BuildContext context, RecordingPlayerCard selectedItem) {
  return (Store<RecordingPlayerAppState> store) async {
    RecordingPlayerScreen.dispatch(
        context, UpdateSelectedItem(selectedItem: selectedItem));
  };
}
