// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/assignments/widgets/assignmentScreen.dart';
import 'package:inspflutterfrontend/common/extensions.dart';
import 'package:inspflutterfrontend/common/model/insp_card_model.dart';
import 'package:inspflutterfrontend/data/hardcoded/library_subjects.dart';
import 'package:inspflutterfrontend/data/hardcoded/secret_key.dart';
import 'package:inspflutterfrontend/data/remote/models/library/all_topics_for_subject_request_model.dart';
import 'package:inspflutterfrontend/data/remote/remote_data_source.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'assignment_screen_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'home_redux.g.dart';

@freezed
class AssignmentScreenAppState with _$AssignmentScreenAppState {
  const factory AssignmentScreenAppState(
      {required INSPCardModel selectedItem,
      @Default([]) List<INSPCardModel> allSubjectTopics,
      @Default('') String query}) = _AssignmentScreenAppState;
}

class UpdateQueryText extends AssignmentScreenAction {
  String query;

  UpdateQueryText({required this.query});
}

class UpdateSelectedItem extends AssignmentScreenAction {
  INSPCardModel selectedItem;
  UpdateSelectedItem({required this.selectedItem});
}

class UpdateSubjectTopicItem extends AssignmentScreenAction {
  List<INSPCardModel> selectedItem;
  UpdateSubjectTopicItem({required this.selectedItem});
}

sealed class AssignmentScreenAction {}

AssignmentScreenAppState _assignmentCoursesStateReducer(
    AssignmentScreenAppState state, AssignmentScreenAction action) {
  switch (action) {
    case UpdateQueryText():
      return state.copyWith(query: action.query);
    case UpdateSelectedItem():
      return state.copyWith(selectedItem: action.selectedItem);
    case UpdateSubjectTopicItem():
      return state.copyWith(allSubjectTopics: action.selectedItem);
  }
}

AssignmentScreenAppState assignmentCoursesStateReducer(
    AssignmentScreenAppState state, dynamic action) {
  var upState = _assignmentCoursesStateReducer(state, action);
  if (kDebugMode) {
    // print(upState.allTopicsForSelectedCourse);
  }
  return upState;
}

ThunkAction<AssignmentScreenAppState> initialFetchSubjectTopic(
    BuildContext context) {
  return (Store<AssignmentScreenAppState> store) async {
    AssignmentScreen.dispatch(
        context, showTopicsForSubject(context, store.state.selectedItem));
  };
}

ThunkAction<AssignmentScreenAppState> showTopicsForSubject(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<AssignmentScreenAppState> store) async {
    AssignmentScreen.dispatch(
        context, UpdateSelectedItem(selectedItem: inspCardModel));
    final remoteDataSource = RemoteDataSource();
    final subjectId =
        inspCardModel.id == '1' || inspCardModel.id == '4' ? '1' : '2';
    final allTopics = await remoteDataSource.getAllTopicsForSubject(
        AllTopicsForSubjectRequestModel(
            secret_key: secretKey, subject_id: subjectId));
    if (allTopics.response.statusCode == 201 && allTopics.data.status == true) {
      final allTopicsForSubject = allTopics
              .data.allTopicsForSubjectResponseModelResult
              .map((it) => INSPCardModel(
                  it.id ?? '',
                  (it.name ?? '').capitalizeFirstLetter(),
                  'Nitin Sachan',
                  topicDescriptionConstants[int.parse(it.id ?? '1')] ?? ''))
              .toList() ??
          [];

      AssignmentScreen.dispatch(
          context, UpdateSubjectTopicItem(selectedItem: allTopicsForSubject));
    } else {
      AssignmentScreen.dispatch(
          context, UpdateSubjectTopicItem(selectedItem: []));
    }
  };
}

ThunkAction<AssignmentScreenAppState> showSelectedItem(
    BuildContext context, INSPCardModel lecture) {
  return (Store<AssignmentScreenAppState> store) async {
    AssignmentScreen.dispatch(
        context, UpdateSelectedItem(selectedItem: lecture));
  };
}
