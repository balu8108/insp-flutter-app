// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/redux/AppState.dart';
import 'package:inspflutterfrontend/utils/userDetail/getUserDetail.dart';
import 'package:inspflutterfrontend/widget/card/model/upcoming_lecture_card_model.dart';
import 'package:inspflutterfrontend/apiservices/models/mycourses/all_lectures_for_course_response_model.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'upcoming_class_widget_redux.freezed.dart';

@freezed
class UpcomingWidgetAppState with _$UpcomingWidgetAppState {
  const factory UpcomingWidgetAppState({
    @Default([]) List<AllLecturesForCourseResponseModelData> mobileUpcoming,
    @Default([]) List<AllLecturesForCourseResponseModelData> ongoing,
    @Default([]) List<AllLecturesForCourseResponseModelData> today,
    @Default([]) List<AllLecturesForCourseResponseModelData> week,
    @Default([]) List<AllLecturesForCourseResponseModelData> completed,
    @Default(UpcomingLectureCardModel([], [], [], []))
    UpcomingLectureCardModel weeklyData,
  }) = _UpcomingWidgetAppState;
}

// Action
abstract class UpcomingWidgetAction {}

class UpdateWeeklyData extends UpcomingWidgetAction {
  final UpcomingLectureCardModel weeklyData;

  UpdateWeeklyData({required this.weeklyData});
}

class UpdateMobileUpcoming extends UpcomingWidgetAction {
  List<AllLecturesForCourseResponseModelData> mobileUpcoming;

  UpdateMobileUpcoming({required this.mobileUpcoming});
}

UpcomingWidgetAppState upcomingWidgetReducer(
    UpcomingWidgetAppState state, dynamic action) {
  if (action is UpdateWeeklyData) {
    return state.copyWith(weeklyData: action.weeklyData);
  } else if (action is UpdateMobileUpcoming) {
    return state.copyWith(mobileUpcoming: action.mobileUpcoming);
  }
  return state;
}

// Thunk action
ThunkAction<AppState> getAllUpcomingClass(BuildContext context) {
  return (Store<AppState> store) async {
    try {
      final remoteDataSource = RemoteDataSource();
      String userToken = getUserToken(context);
      final allLecture =
          await remoteDataSource.getAllUpcomingClasses(userToken);
      final UpcomingLectureCardModel allSubjectsResults =
          UpcomingLectureCardModel(
              allLecture.data.data.ongoing,
              allLecture.data.data.today,
              allLecture.data.data.week,
              allLecture.data.data.completed);
      final List<AllLecturesForCourseResponseModelData> mobileData = [
        ...allLecture.data.data.ongoing,
        ...allLecture.data.data.today,
      ];
      store.dispatch(UpdateWeeklyData(weeklyData: allSubjectsResults));
      store.dispatch(UpdateMobileUpcoming(mobileUpcoming: mobileData));
    } catch (error) {
      // Handle errors appropriately here
    }
  };
}
