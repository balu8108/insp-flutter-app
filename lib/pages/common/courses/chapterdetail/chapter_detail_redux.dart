// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/main.dart';
import 'package:insp/pages/common/courses/chapterdetail/chapter_detail_screen.dart';
import 'package:insp/utils/extensions.dart';
import 'package:insp/widget/card/model/insp_card_model.dart';
import 'package:insp/data/hardcoded/library_subjects.dart';
import 'package:insp/apiservices/models/library/all_topic_for_chapter_request_model.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:insp/pages/common/courses/topiclecture/topic_lecture_screen.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'chapter_detail_redux.freezed.dart';

@freezed
class ChapterDetailAppState with _$ChapterDetailAppState {
  const factory ChapterDetailAppState({
    required INSPCardModel selectedchapter,
    @Default([]) List<INSPCardModel> allChapter,
    @Default([]) List<INSPCardModel> allTopics,
  }) = _ChapterDetailAppState;
}

ChapterDetailAppState chapterDetailReducer(
    ChapterDetailAppState state, dynamic action) {
  var upState = _chapterDetailReducer(state, action);
  return upState;
}

sealed class ChapterDetailAction {}

class UpdateSelectedChapter extends ChapterDetailAction {
  INSPCardModel selectedchapter;
  UpdateSelectedChapter({required this.selectedchapter});
}

class UpdateAllTopic extends ChapterDetailAction {
  List<INSPCardModel> allTopics;
  UpdateAllTopic({required this.allTopics});
}

ChapterDetailAppState _chapterDetailReducer(
    ChapterDetailAppState state, ChapterDetailAction action) {
  switch (action) {
    case UpdateSelectedChapter():
      return state.copyWith(selectedchapter: action.selectedchapter);
    case UpdateAllTopic():
      return state.copyWith(allTopics: action.allTopics);
  }
}

ThunkAction<ChapterDetailAppState> showTopicsByChapter(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<ChapterDetailAppState> store) async {
    try {
      store.dispatch(UpdateSelectedChapter(selectedchapter: inspCardModel));

      final remoteDataSource = RemoteDataSource();
      final chapterId = inspCardModel.id;
      final allTopics = await remoteDataSource.getAllTopicsByChapter(
          AllTopicsForChapterRequestModel(
              secret_key: "U5Ga0Z1aaNlYHp0MjdEdXJ1aKVVVB1TP",
              chapter_id: chapterId));

      if (allTopics.response.statusCode == 201 &&
          allTopics.data.status == true) {
        final allTopicsForSubject = allTopics
            .data.physicsCourseTopicsResponseModelResult
            .map((it) => INSPCardModel(
                it.id ?? '',
                (it.name ?? '').capitalizeFirstLetter(),
                'Nitin Sachan',
                topicDescriptionConstants[int.parse(it.id ?? '1')] ?? ''))
            .toList();

        store.dispatch(UpdateAllTopic(allTopics: allTopicsForSubject));
      } else {
        store.dispatch(UpdateAllTopic(allTopics: []));
      }
    } catch (error) {
      store.dispatch(UpdateAllTopic(allTopics: []));
    }
  };
}

ThunkAction<ChapterDetailAppState> initialFetchTopics(BuildContext context) {
  return (Store<ChapterDetailAppState> store) async {
    ChapterDetailScreen.dispatch(
        context, showTopicsByChapter(context, store.state.selectedchapter));
  };
}

ThunkAction<ChapterDetailAppState> sendToTopicLectureScreen(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<ChapterDetailAppState> store) async {
    Navigator.push(
      context,
      MaterialPageRoute(
          builder: (context) => MainScaffold(
              content: TopicLectureScreen.getScreen(
                  inspCardModel, store.state.allTopics))),
    );
  };
}
