// This file is "main.dart"
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/peers_model.dart';
import 'package:inspflutterfrontend/redux/AppState.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'peers_widget_redux.freezed.dart';

@freezed
class PeersWidgetAppState with _$PeersWidgetAppState {
  const factory PeersWidgetAppState(
      {@Default([]) List<PeersDataModel> allPeers,
      @Default('') String searchKeyword,
      @Default([]) List<PeersDataModel> filteredPeers}) = _PeersWidgetAppState;
}

class UpdateAllPeers extends PeersWidgetAction {
  List<PeersDataModel> allPeers;
  UpdateAllPeers({required this.allPeers});
}

class UpdateFilteredPeers extends PeersWidgetAction {
  List<PeersDataModel> filteredPeers;
  UpdateFilteredPeers({required this.filteredPeers});
}

class UpdateSearchKeyword extends PeersWidgetAction {
  String searchKeyword;
  UpdateSearchKeyword({required this.searchKeyword});
}

sealed class PeersWidgetAction {}

PeersWidgetAppState peersMessageStateReducer(
    PeersWidgetAppState state, dynamic action) {
  if (action is UpdateAllPeers) {
    return state.copyWith(allPeers: action.allPeers);
  }
  if (action is UpdateFilteredPeers) {
    return state.copyWith(filteredPeers: action.filteredPeers);
  }
  if (action is UpdateSearchKeyword) {
    return state.copyWith(searchKeyword: action.searchKeyword);
  }
  return state;
}

ThunkAction<AppState> filteredPeers() {
  return (Store<AppState> store) async {
    List<PeersDataModel> defaultPeer = store.state.peersWidgetAppState.allPeers;
    String search = store.state.peersWidgetAppState.searchKeyword;
    if (search.isNotEmpty) {
      List<PeersDataModel> filteredPeople = defaultPeer
          .where((person) =>
              person.name.toLowerCase().contains(search.toLowerCase()))
          .toList();

      store.dispatch(UpdateFilteredPeers(filteredPeers: filteredPeople));
    }
  };
}

ThunkAction<AppState> defaultPeers() {
  return (Store<AppState> store) async {
    List<PeersDataModel> defaultPeer = store.state.peersWidgetAppState.allPeers;
    store.dispatch(UpdateFilteredPeers(filteredPeers: defaultPeer));
  };
}
