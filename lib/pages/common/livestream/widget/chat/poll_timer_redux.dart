// This file is "main.dart"
import 'dart:async';

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/pages/common/livestream/widget/chat/chat_widget_redux.dart';
import 'package:insp/redux/AppState.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'poll_timer_redux.freezed.dart';

@freezed
class PollTimerAppState with _$PollTimerAppState {
  const factory PollTimerAppState(
      {@Default(0) int timer,
      @Default(false) bool isTimerInitialized}) = _PollTimerAppState;
}

class UpdateTimer extends PollTimerAction {
  int timer;
  UpdateTimer({required this.timer});
}

class UpdateIsTimerIntialised extends PollTimerAction {
  bool isTimerInitialized;
  UpdateIsTimerIntialised({required this.isTimerInitialized});
}

sealed class PollTimerAction {}

PollTimerAppState polltimerStateReducer(
    PollTimerAppState state, dynamic action) {
  if (action is UpdateTimer) {
    return state.copyWith(timer: action.timer);
  } else if (action is UpdateIsTimerIntialised) {
    return state.copyWith(isTimerInitialized: action.isTimerInitialized);
  }
  return state;
}

Timer? countdownTimer;

ThunkAction<AppState> setTimerValue(int value) {
  return (Store<AppState> store) async {
    // Cancel the existing timer if it's active
    countdownTimer?.cancel();

    store.dispatch(UpdateTimer(timer: value));
    countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      final currentTime = store.state.pollTimerAppState.timer;

      if (currentTime > 0) {
        store.dispatch(decreaseTime());
      } else {
        countdownTimer?.cancel();
        countdownTimer = null;
        store.dispatch(cleanState());
        store.dispatch(resetTimer());
      }
    });

    store.dispatch(
        UpdateIsTimerIntialised(isTimerInitialized: true)); // Uncommented
  };
}

ThunkAction<AppState> increase() {
  return (Store<AppState> store) async {
    store
        .dispatch(UpdateTimer(timer: store.state.pollTimerAppState.timer + 10));
  };
}

ThunkAction<AppState> startTimer() {
  return (Store<AppState> store) async {
    store.dispatch(UpdateIsTimerIntialised(isTimerInitialized: true));
  };
}

ThunkAction<AppState> decreaseTime() {
  return (Store<AppState> store) async {
    store.dispatch(UpdateTimer(timer: store.state.pollTimerAppState.timer - 1));
  };
}

ThunkAction<AppState> resetTimer() {
  return (Store<AppState> store) async {
    store.dispatch(UpdateTimer(timer: 0));
    store.dispatch(UpdateIsTimerIntialised(isTimerInitialized: false));
  };
}
