// This file is "main.dart"
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/apiservices/models/login/login_response_model.dart';
import 'package:inspflutterfrontend/apiservices/models/mycourses/all_lectures_for_course_response_model.dart';
import 'package:inspflutterfrontend/apiservices/models/upcomingclasses/lecture_detail_by_roomid_response_model.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:inspflutterfrontend/redux/AppState.dart';
import 'package:inspflutterfrontend/socket/mainsocket.dart';
import 'package:inspflutterfrontend/utils/userDetail/getUserDetail.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';
import 'package:toastification/toastification.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'preview_data_redux.freezed.dart';

@freezed
class PreviewDataAppState with _$PreviewDataAppState {
  const factory PreviewDataAppState(
          {@Default(LecturesDetailResponseModelData())
          LecturesDetailResponseModelData previewData,
          @Default([]) List<LiveClassRoomFile> previewDataFiles}) =
      _PreviewDataAppState;
}

class UpdatePreviewData extends PreviewDataAction {
  LecturesDetailResponseModelData previewData;
  UpdatePreviewData({required this.previewData});
}

class UpdatePreviewDataFiles extends PreviewDataAction {
  List<LiveClassRoomFile> previewDataFiles;
  UpdatePreviewDataFiles({required this.previewDataFiles});
}

sealed class PreviewDataAction {}

PreviewDataAppState previewDataReducer(
    PreviewDataAppState state, dynamic action) {
  if (action is UpdatePreviewData) {
    return state.copyWith(previewData: action.previewData);
  } else if (action is UpdatePreviewDataFiles) {
    return state.copyWith(previewDataFiles: action.previewDataFiles);
  }
  return state;
}

ThunkAction<AppState> getPreviewClassData(BuildContext context, String roomId) {
  return (Store<AppState> store) async {
    try {
      LoginResponseModelResult userData = getUserDataFromStore(context);
      final remoteDataSource = RemoteDataSource();
      final previewData = await remoteDataSource.getRoomPreviewData(
          roomId, 'Token ${userData.token}');

      LecturesDetailResponseModelData previewFinalData =
          LecturesDetailResponseModelData.fromJson(
              previewData.response.data['data']);
      if (previewData.response.statusCode == 200) {
        store.dispatch(UpdatePreviewData(previewData: previewFinalData));
        store.dispatch(UpdatePreviewDataFiles(
            previewDataFiles: previewFinalData.liveClassRoomFiles));
        store.dispatch(initialSetup(context, roomId, userData.token));
      } else {
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.warning,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Some issue, please try again'),
          alignment: Alignment.topRight,
        );
      }
    } catch (error) {
      toastification.show(
        context: context, // optional if you use ToastificationWrapper
        type: ToastificationType.error,
        style: ToastificationStyle.fillColored,
        autoCloseDuration: const Duration(seconds: 3),
        title: const Text('Some issue, please try again'),
        alignment: Alignment.topRight,
      );
    }
  };
}

ThunkAction<AppState> initialSetup(
    BuildContext context, String roomId, String token) {
  return (Store<AppState> store) async {
    initializeSocketConnections(store, roomId, token);
  };
}

ThunkAction<AppState> addFileToPreviewData(dynamic res) {
  return (Store<AppState> store) async {
    // Check if 'files' exists and is a list
    if (res.containsKey('files') &&
        res['files'] != null &&
        res['files'] is List) {
      // Map each file in the list to a LiveClassRoomFile instance
      List<LiveClassRoomFile> fileDetailsList = (res['files'] as List)
          .map((file) => LiveClassRoomFile.fromJson(file))
          .toList();

      List<LiveClassRoomFile> previewDataFiles =
          store.state.previewDataAppState.previewDataFiles;

      // Create a new list that includes the existing files and the new file details.
      List<LiveClassRoomFile> updatedLiveClassRoomFiles = [
        ...previewDataFiles,
        ...fileDetailsList // Add all new files to the list
      ];

      // Dispatch the action to update chat messages in the store
      store.dispatch(
          UpdatePreviewDataFiles(previewDataFiles: updatedLiveClassRoomFiles));
    } else {
      print("Error: 'files' key not found, is null, or not a list.");
    }
  };
}
