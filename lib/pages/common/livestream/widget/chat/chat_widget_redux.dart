// This file is "main.dart"
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/pages/common/livestream/mainscreen/liveclass.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/chat_message_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/leaderboard_answer_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/leaderboard_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/peers_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/polldata_model.dart';
import 'package:inspflutterfrontend/socket/mainsocket.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'chat_widget_redux.freezed.dart';

@freezed
class ChatWidgetAppState with _$ChatWidgetAppState {
  const factory ChatWidgetAppState({
    @Default([]) List<ChatMessageModel> chatMessages,
    @Default([]) List<PeersDataModel> allPeers,
    @Default([]) List<LeaderboardModel> leaderBoard,
    @Default([]) List<LeaderBoardAnswerModel> leaderBoardAnswerPercentage,
    @Default([]) List<ChatMessageModel> questionMessages,
    @Default([]) List<PollDataModel> pollData,
  }) = _ChatWidgetAppState;
}

class UpdateAllPeers extends ChatWidgetAction {
  List<PeersDataModel> allPeers;
  UpdateAllPeers({required this.allPeers});
}

class UpdateChatMessages extends ChatWidgetAction {
  List<ChatMessageModel> chatMessages;
  UpdateChatMessages({required this.chatMessages});
}

class UpdateLeaderBoard extends ChatWidgetAction {
  List<LeaderboardModel> leaderBoard;
  UpdateLeaderBoard({required this.leaderBoard});
}

class UpdateLeaderboardMessages extends ChatWidgetAction {
  List<LeaderBoardAnswerModel> leaderBoardAnswerPercentage;
  UpdateLeaderboardMessages({required this.leaderBoardAnswerPercentage});
}

class UpdateQuestionMessage extends ChatWidgetAction {
  List<ChatMessageModel> questionMessages;
  UpdateQuestionMessage({required this.questionMessages});
}

class UpdatePollData extends ChatWidgetAction {
  List<PollDataModel> pollData;
  UpdatePollData({required this.pollData});
}

sealed class ChatWidgetAction {}

ChatWidgetAppState _chatMessageStateReducer(
    ChatWidgetAppState state, ChatWidgetAction action) {
  switch (action) {
    case UpdateAllPeers():
      return state.copyWith(allPeers: action.allPeers);
    case UpdateChatMessages():
      return state.copyWith(chatMessages: action.chatMessages);
    case UpdateLeaderBoard():
      return state.copyWith(leaderBoard: action.leaderBoard);
    case UpdateLeaderboardMessages():
      return state.copyWith(
          leaderBoardAnswerPercentage: action.leaderBoardAnswerPercentage);
    case UpdateQuestionMessage():
      return state.copyWith(questionMessages: action.questionMessages);
    case UpdatePollData():
      return state.copyWith(pollData: action.pollData);
  }
}

ChatWidgetAppState chatMessageStateReducer(
    ChatWidgetAppState state, dynamic action) {
  var upState = _chatMessageStateReducer(state, action);
  return upState;
}

ThunkAction<ChatWidgetAppState> initialSetup(BuildContext context) {
  return (Store<ChatWidgetAppState> store) async {
    initializeSocketConnections(store, "srvsgDWKiQ");
  };
}

ThunkAction<ChatWidgetAppState> navigateToRoom(
    BuildContext context, String roomId, dynamic userProfile) {
  return (Store<ChatWidgetAppState> store) async {
    await joinRoomHandler(store, roomId, userProfile);
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => LiveClassScreen.getScreen()),
    );
  };
}
