// This file is "main.dart"
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/pages/common/livestream/mainscreen/liveclass.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/chat_message_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/leaderboard_answer_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/leaderboard_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/peers_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/polldata_model.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/question_message_model.dart';
import 'package:inspflutterfrontend/redux/AppState.dart';
import 'package:inspflutterfrontend/socket/mainsocket.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';
import 'package:uuid/uuid.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'chat_widget_redux.freezed.dart';

var uuid = Uuid();

@freezed
class ChatWidgetAppState with _$ChatWidgetAppState {
  const factory ChatWidgetAppState({
    @Default([]) List<ChatMessageModel> chatMessages,
    @Default([]) List<PeersDataModel> allPeers,
    @Default([]) List<LeaderboardModel> leaderBoard,
    @Default([]) List<LeaderBoardAnswerModel> leaderBoardAnswerPercentage,
    @Default([]) List<QuestionMessageModel> questionMessages,
    @Default([]) List<PollDataModel> pollData,
  }) = _ChatWidgetAppState;
}

class UpdateAllPeers extends ChatWidgetAction {
  List<PeersDataModel> allPeers;
  UpdateAllPeers({required this.allPeers});
}

class UpdateChatMessages extends ChatWidgetAction {
  List<ChatMessageModel> chatMessages;
  UpdateChatMessages({required this.chatMessages});
}

class UpdateLeaderBoard extends ChatWidgetAction {
  List<LeaderboardModel> leaderBoard;
  UpdateLeaderBoard({required this.leaderBoard});
}

class UpdateLeaderboardMessages extends ChatWidgetAction {
  List<LeaderBoardAnswerModel> leaderBoardAnswerPercentage;
  UpdateLeaderboardMessages({required this.leaderBoardAnswerPercentage});
}

class UpdateQuestionMessage extends ChatWidgetAction {
  List<QuestionMessageModel> questionMessages;
  UpdateQuestionMessage({required this.questionMessages});
}

class UpdatePollData extends ChatWidgetAction {
  List<PollDataModel> pollData;
  UpdatePollData({required this.pollData});
}

sealed class ChatWidgetAction {}

ChatWidgetAppState chatMessageStateReducer(
    ChatWidgetAppState state, dynamic action) {
  if (action is UpdateAllPeers) {
    return state.copyWith(allPeers: action.allPeers);
  } else if (action is UpdateChatMessages) {
    return state.copyWith(chatMessages: action.chatMessages);
  } else if (action is UpdateLeaderBoard) {
    return state.copyWith(leaderBoard: action.leaderBoard);
  } else if (action is UpdateLeaderboardMessages) {
    return state.copyWith(
        leaderBoardAnswerPercentage: action.leaderBoardAnswerPercentage);
  } else if (action is UpdateQuestionMessage) {
    return state.copyWith(questionMessages: action.questionMessages);
  } else if (action is UpdatePollData) {
    return state.copyWith(pollData: action.pollData);
  }
  return state;
}

ThunkAction<AppState> initialSetup(BuildContext context) {
  return (Store<AppState> store) async {
    initializeSocketConnections(store, "rc8LNxmKMT");
  };
}

ThunkAction<AppState> navigateToRoom(
    BuildContext context, String roomId, dynamic userProfile) {
  return (Store<AppState> store) async {
    await joinRoomHandler(store, roomId, userProfile);
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const LiveClassScreen()),
    );
  };
}

ThunkAction<AppState> addServerChatMessage(dynamic res) {
  return (Store<AppState> store) async {
    // Extracting 'msg' and 'peerDetails' from the response
    String msg = res['msg'];
    PeerDetail peerDetails = PeerDetail.fromJson(res['peerDetails']);

    // Assuming 'ChatMessageModel.fromJson' can handle the JSON structure
    ChatMessageModel newMessage = ChatMessageModel.fromJson(
        {'msg': msg, 'peerDetails': peerDetails.toJson()});

    // Get the current messages from the store
    List<ChatMessageModel> currentMessages =
        store.state.chatWidgetAppState.chatMessages;

    // Create the updated list of messages
    List<ChatMessageModel> chatMessages = [
      ...currentMessages.sublist(max(0, currentMessages.length - 50)),
      newMessage
    ];

    // Dispatch the action to update chat messages in the store
    store.dispatch(UpdateChatMessages(chatMessages: chatMessages));
  };
}

ThunkAction<AppState> addUserChatMessage(BuildContext context, String msg) {
  return (Store<AppState> store) async {
    // Extracting 'msg' and 'peerDetails' from the response
    PeerDetail peerDetails = PeerDetail(id: uuid.v4(), name: 'You');

    // Assuming 'ChatMessageModel.fromJson' can handle the JSON structure
    ChatMessageModel newMessage = ChatMessageModel.fromJson(
        {'msg': msg, 'peerDetails': peerDetails.toJson()});

    // Get the current messages from the store
    List<ChatMessageModel> currentMessages =
        store.state.chatWidgetAppState.chatMessages;

    // Create the updated list of messages
    List<ChatMessageModel> chatMessages = [
      ...currentMessages.sublist(max(0, currentMessages.length - 50)),
      newMessage
    ];

    // Dispatch the action to update chat messages in the store
    store.dispatch(UpdateChatMessages(chatMessages: chatMessages));
  };
}

ThunkAction<AppState> addServerQuestionMessage(dynamic res) {
  return (Store<AppState> store) async {
    // Extracting 'msg' and 'peerDetails' from the response
    String msg = res['msg'];
    PeerDetail peerDetails = PeerDetail.fromJson(res['peerDetails']);

    // Assuming 'ChatMessageModel.fromJson' can handle the JSON structure
    QuestionMessageModel newMessage = QuestionMessageModel.fromJson(
        {'questionMsg': msg, 'peerDetails': peerDetails.toJson()});

    // Get the current messages from the store
    List<QuestionMessageModel> currentMessages =
        store.state.chatWidgetAppState.questionMessages;

    // Create the updated list of messages
    List<QuestionMessageModel> questionMessages = [
      ...currentMessages.sublist(max(0, currentMessages.length - 50)),
      newMessage
    ];

    // Dispatch the action to update chat messages in the store
    store.dispatch(UpdateQuestionMessage(questionMessages: questionMessages));
  };
}

ThunkAction<AppState> addUserQuestionMessage(BuildContext context, String msg) {
  return (Store<AppState> store) async {
    // Extracting 'msg' and 'peerDetails' from the response
    PeerDetail peerDetails = PeerDetail(id: uuid.v4(), name: 'You');

    // Assuming 'ChatMessageModel.fromJson' can handle the JSON structure
    QuestionMessageModel newMessage = QuestionMessageModel.fromJson(
        {'questionMsg': msg, 'peerDetails': peerDetails.toJson()});

    // Get the current messages from the store
    List<QuestionMessageModel> currentQuestion =
        store.state.chatWidgetAppState.questionMessages;

    // Create the updated list of messages
    List<QuestionMessageModel> questionMessages = [
      ...currentQuestion.sublist(max(0, currentQuestion.length - 50)),
      newMessage
    ];

    // Dispatch the action to update chat messages in the store
    store.dispatch(UpdateQuestionMessage(questionMessages: questionMessages));
  };
}

ThunkAction<AppState> addQuestion(dynamic res) {
  return (Store<AppState> store) async {
    print("67686");
    print(res['leaderBoard']);

    List<LeaderboardModel> leaderBoard = (res['leaderBoard'] as List)
        .map((item) => LeaderboardModel(
              combinedResponseTime: item['combinedResponseTime'] as int,
              correctAnswers: item['correctAnswers'] as int,
              peerDetails: PeerDetailLeaderboard.fromJson(item['peerDetails']),
            ))
        .toList();
    print(leaderBoard);
    // // Extracting 'msg' and 'peerDetails' from the response
    // PeerDetail peerDetails = PeerDetail(id: uuid.v4(), name: 'You');

    // // Assuming 'ChatMessageModel.fromJson' can handle the JSON structure
    // QuestionMessageModel newMessage = QuestionMessageModel.fromJson(
    //     {'questionMsg': msg, 'peerDetails': peerDetails.toJson()});

    // // Get the current messages from the store
    // List<QuestionMessageModel> currentQuestion =
    //     store.state.chatWidgetAppState.questionMessages;

    // // Create the updated list of messages
    // List<QuestionMessageModel> questionMessages = [
    //   ...currentQuestion.sublist(max(0, currentQuestion.length - 50)),
    //   newMessage
    // ];

    // // Dispatch the action to update chat messages in the store
    // store.dispatch(UpdateQuestionMessage(questionMessages: questionMessages));
  };
}
