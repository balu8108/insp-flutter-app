// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/apiservices/models/library/all_topics_for_subject_request_model.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:inspflutterfrontend/data/hardcoded/library_subjects.dart';
import 'package:inspflutterfrontend/data/hardcoded/secret_key.dart';
import 'package:inspflutterfrontend/utils/extensions.dart';
import 'package:inspflutterfrontend/widget/card/model/insp_card_model.dart';
import 'package:inspflutterfrontend/widget/card/model/rating_feedback_card_model.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'rating_feedback_detail_redux.freezed.dart';

@freezed
class RatingFeedbackDetailAppState with _$RatingFeedbackDetailAppState {
  const factory RatingFeedbackDetailAppState({
    required INSPCardModel selectedItem,
    @Default([]) List<INSPCardModel> allTopic,
    @Default([]) List<RatingFeedbackCardModal> ratingFeedbackCard,
  }) = _RatingFeedbackDetailAppState;
}

sealed class RatingFeedbackDetailAction {}

class UpdateAllTopic extends RatingFeedbackDetailAction {
  List<INSPCardModel> allTopic;
  UpdateAllTopic({required this.allTopic});
}

class UpdateRatingFeedbackCard extends RatingFeedbackDetailAction {
  List<RatingFeedbackCardModal> ratingFeedbackCard;

  UpdateRatingFeedbackCard({required this.ratingFeedbackCard});
}

RatingFeedbackDetailAppState _ratingFeedbackDetailStateReducer(
    RatingFeedbackDetailAppState state, RatingFeedbackDetailAction action) {
  switch (action) {
    case UpdateRatingFeedbackCard():
      return state.copyWith(ratingFeedbackCard: action.ratingFeedbackCard);
    case UpdateAllTopic():
      return state.copyWith(allTopic: action.allTopic);
  }
}

RatingFeedbackDetailAppState ratingFeedbackDetailStateReducer(
    RatingFeedbackDetailAppState state, dynamic action) {
  var upState = _ratingFeedbackDetailStateReducer(state, action);
  if (kDebugMode) {}
  return upState;
}

ThunkAction<RatingFeedbackDetailAppState> showRatingFeedbackDetail(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<RatingFeedbackDetailAppState> store) async {
    try {
      final remoteDataSource = RemoteDataSource();
      final topicId = inspCardModel.id;
      final allTopics = await remoteDataSource.getTopicFeedbackRatingDetail(
          topicId, 'Token $secretKeyToken');
      if (allTopics.response.statusCode == 200) {
        final List<RatingFeedbackCardModal> ratingFeedbackCardData = allTopics
            .data.topicDetails
            .map((it) => RatingFeedbackCardModal(it.raterName, it.feedback))
            .toList();
        store.dispatch(UpdateRatingFeedbackCard(
            ratingFeedbackCard: ratingFeedbackCardData));
      } else {
        store.dispatch(UpdateRatingFeedbackCard(ratingFeedbackCard: []));
      }
    } catch (error) {
      store.dispatch(UpdateRatingFeedbackCard(ratingFeedbackCard: []));
    }
  };
}

ThunkAction<RatingFeedbackDetailAppState> showTopicsForSubject(
    BuildContext context) {
  return (Store<RatingFeedbackDetailAppState> store) async {
    final remoteDataSource = RemoteDataSource();
    final subjectId =
        "1"; // baad mai dynamic karenge jab math or chemistry ke topic aa jaaye
    final allTopics = await remoteDataSource.getAllTopicsForSubject(
        AllTopicsForSubjectRequestModel(
            secret_key: secretKey, subject_id: subjectId));
    if (allTopics.response.statusCode == 201 && allTopics.data.status == true) {
      final allTopicsForSubject = allTopics
              .data.allTopicsForSubjectResponseModelResult
              .map((it) => INSPCardModel(
                  it.id ?? '',
                  (it.name ?? '').capitalizeFirstLetter(),
                  'Nitin Sachan',
                  topicDescriptionConstants[int.parse(it.id ?? '1')] ?? ''))
              .toList() ??
          [];

      store.dispatch(UpdateAllTopic(allTopic: allTopicsForSubject));
    } else {
      store.dispatch(UpdateAllTopic(allTopic: []));
    }
  };
}

ThunkAction<RatingFeedbackDetailAppState> initialFetchSubjectTopic(
    BuildContext context) {
  return (Store<RatingFeedbackDetailAppState> store) async {
    store.dispatch(showTopicsForSubject(context));
  };
}

ThunkAction<RatingFeedbackDetailAppState> initialRatingDetail(
    BuildContext context) {
  return (Store<RatingFeedbackDetailAppState> store) async {
    store.dispatch(showRatingFeedbackDetail(context, store.state.selectedItem));
  };
}
