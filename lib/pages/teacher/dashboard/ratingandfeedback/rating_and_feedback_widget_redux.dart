// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:inspflutterfrontend/utils/capitalize.dart';
import 'package:inspflutterfrontend/utils/userDetail/getUserDetail.dart';
import 'package:inspflutterfrontend/widget/card/model/latest_completed_class_card_model.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'rating_and_feedback_widget_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'home_redux.g.dart';

@freezed
class RatingFeedbackWidgetAppState with _$RatingFeedbackWidgetAppState {
  const factory RatingFeedbackWidgetAppState({
    @Default([]) List<LatestCompletedClassCardModel> latestCompletedClassData,
  }) = _RatingFeedbackWidgetAppState;
}

sealed class RatingFeedbackWidgetAction {}

class UpdatLatestCompletedClass extends RatingFeedbackWidgetAction {
  List<LatestCompletedClassCardModel> latestCompletedClassData;

  UpdatLatestCompletedClass({required this.latestCompletedClassData});
}

RatingFeedbackWidgetAppState _ratingFeedbackWidgetReducer(
    RatingFeedbackWidgetAppState state, RatingFeedbackWidgetAction action) {
  switch (action) {
    case UpdatLatestCompletedClass():
      return state.copyWith(
          latestCompletedClassData: action.latestCompletedClassData);
  }
}

RatingFeedbackWidgetAppState ratingFeedbackWidgetReducer(
    RatingFeedbackWidgetAppState state, dynamic action) {
  var upState = _ratingFeedbackWidgetReducer(state, action);
  return upState;
}

ThunkAction<RatingFeedbackWidgetAppState> getLatestCompletedClass(
    BuildContext context) {
  return (Store<RatingFeedbackWidgetAppState> store) async {
    final remoteDataSource = RemoteDataSource();
    String userToken = getUserToken(context);
    final latestCompletedClass =
        await remoteDataSource.getLatestCompletedClasses(userToken);
    if (latestCompletedClass.data.data.isNotEmpty) {
      var allSubjectsResults = latestCompletedClass.data.data;

      final latestCompletedCardModels = allSubjectsResults
          .map((latestSoloClassResult) => LatestCompletedClassCardModel(
              latestSoloClassResult.id.toString(),
              latestSoloClassResult.liveClassRoomDetail.topicName == ""
                  ? "General"
                  : capitalizeFirstLetter(
                      latestSoloClassResult.liveClassRoomDetail.topicName),
              latestSoloClassResult.liveClassRoomDetail.topicId,
              latestSoloClassResult.mentorName,
              latestSoloClassResult.liveClassRoomDetail.description))
          .toList();

      store.dispatch(UpdatLatestCompletedClass(
          latestCompletedClassData: latestCompletedCardModels));
    }
  };
}
