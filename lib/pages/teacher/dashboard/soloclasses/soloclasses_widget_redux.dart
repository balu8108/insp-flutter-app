// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:insp/utils/capitalize.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/widget/card/model/latest_solo_class_card_model.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'soloclasses_widget_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'home_redux.g.dart';

@freezed
class SoloClassesWidgetAppState with _$SoloClassesWidgetAppState {
  const factory SoloClassesWidgetAppState({
    @Default([]) List<LatestSoloClassCardModel> latestSoloClassesData,
  }) = _SoloClassesWidgetAppState;
}

sealed class SoloClassesWidgetAction {}

class UpdatLatestSoloClass extends SoloClassesWidgetAction {
  List<LatestSoloClassCardModel> latestSoloClassesData;

  UpdatLatestSoloClass({required this.latestSoloClassesData});
}

SoloClassesWidgetAppState _soloClassWidgetReducer(
    SoloClassesWidgetAppState state, SoloClassesWidgetAction action) {
  switch (action) {
    case UpdatLatestSoloClass():
      return state.copyWith(
          latestSoloClassesData: action.latestSoloClassesData);
  }
}

SoloClassesWidgetAppState soloClassWidgetReducer(
    SoloClassesWidgetAppState state, dynamic action) {
  var upState = _soloClassWidgetReducer(state, action);
  return upState;
}

ThunkAction<SoloClassesWidgetAppState> getSoloClass(BuildContext context) {
  return (Store<SoloClassesWidgetAppState> store) async {
    final remoteDataSource = RemoteDataSource();
    String userToken = getUserToken(context);
    final latestSoloClass =
        await remoteDataSource.getLatestSoloClasses(userToken);
    if (latestSoloClass.data.data.isNotEmpty) {
      var allSubjectsResults = latestSoloClass.data.data;

      final latestSoloCardModels = allSubjectsResults
          .map((latestSoloClassResult) => LatestSoloClassCardModel(
              latestSoloClassResult.id.toString(),
              latestSoloClassResult.topicId,
              latestSoloClassResult.topic == ""
                  ? "General"
                  : capitalizeFirstLetter(latestSoloClassResult.topic),
              latestSoloClassResult.mentorName,
              latestSoloClassResult.description))
          .toList();

      store.dispatch(
          UpdatLatestSoloClass(latestSoloClassesData: latestSoloCardModels));
    }
  };
}
