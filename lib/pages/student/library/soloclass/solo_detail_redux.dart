// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/apiservices/models/soloclasses/soloclass_detail_response_model.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/widget/card/model/lecture_card_model.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';
import 'package:toastification/toastification.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'solo_detail_redux.freezed.dart';

@freezed
class SoloDetailAppState with _$SoloDetailAppState {
  const factory SoloDetailAppState(
      {required LectureCardModel selectedItem,
      @Default(SoloClassDetail()) SoloClassDetail sololectureData,
      @Default([]) List<LectureCardModel> allSoloLecture,
      @Default('') String query}) = _SoloDetailAppState;
}

SoloDetailAppState soloDetailReducer(SoloDetailAppState state, dynamic action) {
  var upState = _soloDetailReducer(state, action);
  if (kDebugMode) {}
  return upState;
}

sealed class SoloDetailAction {}

class UpdateQueryText extends SoloDetailAction {
  String query;
  UpdateQueryText({required this.query});
}

class UpdateSololectureData extends SoloDetailAction {
  SoloClassDetail sololectureData;
  UpdateSololectureData({required this.sololectureData});
}

SoloDetailAppState _soloDetailReducer(
    SoloDetailAppState state, SoloDetailAction action) {
  switch (action) {
    case UpdateQueryText():
      return state.copyWith(query: action.query);
    case UpdateSololectureData():
      return state.copyWith(sololectureData: action.sololectureData);
  }
}

ThunkAction<SoloDetailAppState> getSoloClassData(
    BuildContext context, String roomId) {
  return (Store<SoloDetailAppState> store) async {
    try {
      String userToken = getUserToken(context);
      final remoteDataSource = RemoteDataSource();
      final soloData =
          await remoteDataSource.getSoloClassDetail(roomId, userToken);

      SoloClassDetail previewFinalData =
          SoloClassDetail.fromJson(soloData.response.data['data']);

      if (soloData.response.statusCode == 200) {
        store
            .dispatch(UpdateSololectureData(sololectureData: previewFinalData));
      } else {
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.warning,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Some issue, please try again'),
          alignment: Alignment.topRight,
        );
      }
    } catch (error) {
      toastification.show(
        context: context, // optional if you use ToastificationWrapper
        type: ToastificationType.error,
        style: ToastificationStyle.fillColored,
        autoCloseDuration: const Duration(seconds: 3),
        title: const Text('Some issue, please try again'),
        alignment: Alignment.topRight,
      );
    }
  };
}

ThunkAction<SoloDetailAppState> initialFetchSoloDetail(BuildContext context) {
  return (Store<SoloDetailAppState> store) async {
    store.dispatch(getSoloClassData(context, store.state.selectedItem.id));
  };
}
