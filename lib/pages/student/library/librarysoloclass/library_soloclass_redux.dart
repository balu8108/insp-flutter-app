// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/widget/card/model/insp_card_model.dart';
import 'package:insp/widget/card/model/lecture_card_model.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'library_soloclass_redux.freezed.dart';

@freezed
class LibrarySoloClassReduxAppState with _$LibrarySoloClassReduxAppState {
  const factory LibrarySoloClassReduxAppState({
    required INSPCardModel selectedtopic,
    @Default([]) List<LectureCardModel> allLecturesOfSoloClass,
  }) = _LibrarySoloClassReduxAppState;
}

class UpdateSelectedItem extends LibrarySoloClassScreenAction {
  INSPCardModel selectedItem;
  UpdateSelectedItem({required this.selectedItem});
}

class UpdateLectureTopicItem extends LibrarySoloClassScreenAction {
  List<LectureCardModel> allLecturesOfSoloClass;
  UpdateLectureTopicItem({required this.allLecturesOfSoloClass});
}

sealed class LibrarySoloClassScreenAction {}

LibrarySoloClassReduxAppState _librarySoloClassStateReducer(
    LibrarySoloClassReduxAppState state, LibrarySoloClassScreenAction action) {
  switch (action) {
    case UpdateSelectedItem():
      return state.copyWith(selectedtopic: action.selectedItem);
    case UpdateLectureTopicItem():
      return state.copyWith(
          allLecturesOfSoloClass: action.allLecturesOfSoloClass);
  }
}

LibrarySoloClassReduxAppState librarySoloClassTopicStateReducer(
    LibrarySoloClassReduxAppState state, dynamic action) {
  var upState = _librarySoloClassStateReducer(state, action);
  return upState;
}

ThunkAction<LibrarySoloClassReduxAppState> initialFetchLibrarySoloClass(
    BuildContext context) {
  return (Store<LibrarySoloClassReduxAppState> store) async {
    store.dispatch(showLecturesForTopic(context, store.state.selectedtopic));
  };
}

ThunkAction<LibrarySoloClassReduxAppState> showLecturesForTopic(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<LibrarySoloClassReduxAppState> store) async {
    try {
      store.dispatch(UpdateSelectedItem(selectedItem: inspCardModel));

      final remoteDataSource = RemoteDataSource();
      final topicId = inspCardModel.id;
      String userToken = getUserToken(context);
      final allSoloClass =
          await remoteDataSource.getAllSoloClassForTopic(topicId, userToken);
      if (allSoloClass.response.statusCode == 200) {
        final List<LectureCardModel> lecturesForSoloClass =
            (allSoloClass.data.data.map((it) => LectureCardModel(
                it.id.toString(),
                '',
                'Lecture ${it.lectureNo}',
                '',
                it.description,
                it.topic,
                '',
                ''))).toList();

        store.dispatch(UpdateLectureTopicItem(
            allLecturesOfSoloClass: lecturesForSoloClass));
      } else {
        store.dispatch(UpdateLectureTopicItem(allLecturesOfSoloClass: []));
      }
    } catch (error) {
      store.dispatch(UpdateLectureTopicItem(allLecturesOfSoloClass: []));
    }
  };
}
