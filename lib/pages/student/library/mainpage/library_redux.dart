// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/widget/card/model/insp_card_model.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'library_redux.freezed.dart';

@freezed
class LibraryAppState with _$LibraryAppState {
  const factory LibraryAppState(
      {@Default([]) List<INSPCardModel> libraryInspCardModels,
      required INSPCardModel selectedItem}) = _LibraryAppState;
}

sealed class LibraryAction {}

class UpdateLibrarySubjects extends LibraryAction {
  List<INSPCardModel> inspCardModels;

  UpdateLibrarySubjects({required this.inspCardModels});
}

class UpdateSelectedItem extends LibraryAction {
  INSPCardModel selectedItem;

  UpdateSelectedItem({required this.selectedItem});
}

LibraryAppState _libraryStateReducer(
    LibraryAppState state, LibraryAction action) {
  switch (action) {
    case UpdateLibrarySubjects():
      return state.copyWith(libraryInspCardModels: action.inspCardModels);
    case UpdateSelectedItem():
      return state.copyWith(selectedItem: action.selectedItem);
  }
}

LibraryAppState libraryStateReducer(LibraryAppState state, dynamic action) {
  var upState = _libraryStateReducer(state, action);
  if (kDebugMode) {}
  return upState;
}

ThunkAction<LibraryAppState> initialSelectedTopics(
    BuildContext context, INSPCardModel selectedItem) {
  return (Store<LibraryAppState> store) async {
    store.dispatch(UpdateSelectedItem(selectedItem: selectedItem));
  };
}
