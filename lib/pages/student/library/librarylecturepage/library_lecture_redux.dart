// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/utils/class_constants.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/widget/card/model/insp_card_model.dart';
import 'package:insp/widget/card/model/lecture_card_model.dart';
import 'package:insp/data/hardcoded/secret_key.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:insp/pages/student/library/librarylecturepage/library_lecture_screen.dart';
import 'package:intl/intl.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'library_lecture_redux.freezed.dart';

@freezed
class LibraryLectureReduxAppState with _$LibraryLectureReduxAppState {
  const factory LibraryLectureReduxAppState({
    required INSPCardModel selectedtopic,
    @Default([]) List<LectureCardModel> allLecturesOfTopic,
  }) = _LibraryLectureReduxAppState;
}

class UpdateSelectedItem extends LibraryLectureScreenAction {
  INSPCardModel selectedItem;
  UpdateSelectedItem({required this.selectedItem});
}

class UpdateLectureTopicItem extends LibraryLectureScreenAction {
  List<LectureCardModel> allLecturesOfTopic;
  UpdateLectureTopicItem({required this.allLecturesOfTopic});
}

sealed class LibraryLectureScreenAction {}

LibraryLectureReduxAppState _assignmentTopicStateReducer(
    LibraryLectureReduxAppState state, LibraryLectureScreenAction action) {
  switch (action) {
    case UpdateSelectedItem():
      return state.copyWith(selectedtopic: action.selectedItem);
    case UpdateLectureTopicItem():
      return state.copyWith(allLecturesOfTopic: action.allLecturesOfTopic);
  }
}

LibraryLectureReduxAppState LibraryLectureTopicStateReducer(
    LibraryLectureReduxAppState state, dynamic action) {
  var upState = _assignmentTopicStateReducer(state, action);
  return upState;
}

ThunkAction<LibraryLectureReduxAppState> initialFetchLibraryLecture(
    BuildContext context) {
  return (Store<LibraryLectureReduxAppState> store) async {
    LibraryLectureScreen.dispatch(
        context, showLecturesForTopic(context, store.state.selectedtopic));
  };
}

ThunkAction<LibraryLectureReduxAppState> showLecturesForTopic(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<LibraryLectureReduxAppState> store) async {
    try {
      store.dispatch(UpdateSelectedItem(selectedItem: inspCardModel));

      final remoteDataSource = RemoteDataSource();
      final topicId = inspCardModel.id;
      String userToken = getUserToken(context);
      final allTopics = await remoteDataSource.getAllLectureByTopic(
          topicId, "both", userToken);

      if (allTopics.response.statusCode == 200) {
        final List<LectureCardModel> allTopicBasedLecture = allTopics.data.data
            .map((it) => LectureCardModel(
                it.id.toString(),
                it.roomId,
                'Lecture ${it.liveClassRoomDetail.lectureNo}',
                '',
                it.liveClassRoomDetail.description,
                it.liveClassRoomDetail.topicName,
                DateFormat('dd/MM/yyyy')
                    .format(DateTime.parse(it.scheduledDate)),
                ClassLevel.getValueFromName(it.classLevel)))
            .toList();

        store.dispatch(
            UpdateLectureTopicItem(allLecturesOfTopic: allTopicBasedLecture));
      } else {
        store.dispatch(UpdateLectureTopicItem(allLecturesOfTopic: []));
      }
    } catch (error) {
      store.dispatch(UpdateLectureTopicItem(allLecturesOfTopic: []));
    }
  };
}
