// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/widget/card/model/insp_card_model.dart';
import 'package:insp/widget/card/model/topic_assignment_card_model.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'assignment_topic_screen_redux.freezed.dart';

@freezed
class AssignmentTopicScreenAppState with _$AssignmentTopicScreenAppState {
  const factory AssignmentTopicScreenAppState({
    required INSPCardModel selectedtopic,
    @Default([]) List<TopicAssignmentCardModel> allAssignmentOfTopic,
  }) = _AssignmentTopicScreenAppState;
}

class UpdateSelectedItem extends AssignmentScreenAction {
  INSPCardModel selectedItem;
  UpdateSelectedItem({required this.selectedItem});
}

class UpdateAssignmentItem extends AssignmentScreenAction {
  List<TopicAssignmentCardModel> allAssignmentOfTopic;
  UpdateAssignmentItem({required this.allAssignmentOfTopic});
}

sealed class AssignmentScreenAction {}

AssignmentTopicScreenAppState _assignmentTopicStateReducer(
    AssignmentTopicScreenAppState state, AssignmentScreenAction action) {
  switch (action) {
    case UpdateSelectedItem():
      return state.copyWith(selectedtopic: action.selectedItem);
    case UpdateAssignmentItem():
      return state.copyWith(allAssignmentOfTopic: action.allAssignmentOfTopic);
  }
}

AssignmentTopicScreenAppState assignmentTopicStateReducer(
    AssignmentTopicScreenAppState state, dynamic action) {
  var upState = _assignmentTopicStateReducer(state, action);
  return upState;
}

ThunkAction<AssignmentTopicScreenAppState> initialFetchAssignment(
    BuildContext context) {
  return (Store<AssignmentTopicScreenAppState> store) async {
    store.dispatch(showAssignmentForTopic(context, store.state.selectedtopic));
  };
}

ThunkAction<AssignmentTopicScreenAppState> showAssignmentForTopic(
    BuildContext context, INSPCardModel inspCardModel) {
  return (Store<AssignmentTopicScreenAppState> store) async {
    store.dispatch(UpdateSelectedItem(selectedItem: inspCardModel));
    final remoteDataSource = RemoteDataSource();
    final topicId = inspCardModel.id;
    String userToken = getUserToken(context);
    final allAssignment =
        await remoteDataSource.getAllAssignmentForTopic(topicId, userToken);
    if (allAssignment.response.statusCode == 200) {
      final List<TopicAssignmentCardModel> allTopicsForSubject = allAssignment
              .data.data
              .map((it) => TopicAssignmentCardModel(it.id, it.description,
                  it.assignmentFiles, it.topicName, it.instructorName))
              .toList() ??
          [];

      store.dispatch(
          UpdateAssignmentItem(allAssignmentOfTopic: allTopicsForSubject));
    } else {
      store.dispatch(UpdateAssignmentItem(allAssignmentOfTopic: []));
    }
  };
}
