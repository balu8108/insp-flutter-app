// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/utils/extensions.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:insp/widget/card/model/latest_assignment_card_model.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:redux/redux.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'assignment_widget_redux.freezed.dart';

@freezed
class AssignmentWidgetAppState with _$AssignmentWidgetAppState {
  const factory AssignmentWidgetAppState({
    @Default([]) List<LatestAssignmentCardModel> allRecentAssignment,
  }) = _AssignmentWidgetAppState;
}

AssignmentWidgetAppState assignmentWidgetReducer(
    AssignmentWidgetAppState state, dynamic action) {
  var upState = _assignmentWidgetReducer(state, action);
  return upState;
}

sealed class AssignmentWidgetAction {}

class UpdateAllRecentAssignment extends AssignmentWidgetAction {
  List<LatestAssignmentCardModel> allRecentAssignment;
  UpdateAllRecentAssignment({required this.allRecentAssignment});
}

AssignmentWidgetAppState _assignmentWidgetReducer(
    AssignmentWidgetAppState state, AssignmentWidgetAction action) {
  switch (action) {
    case UpdateAllRecentAssignment():
      return state.copyWith(allRecentAssignment: action.allRecentAssignment);
  }
}

ThunkAction<AssignmentWidgetAppState> showRecentAssignment(
    BuildContext context) {
  return (Store<AssignmentWidgetAppState> store) async {
    try {
      final remoteDataSource = RemoteDataSource();
      String userToken = getUserToken(context);
      final allTopics = await remoteDataSource.getRecentAssignment(userToken);

      if (allTopics.response.statusCode == 200) {
        final List<LatestAssignmentCardModel> allTopicsForSubject = allTopics
            .data.data
            .map((it) => LatestAssignmentCardModel(
                it.id.toString(),
                it.topicName.capitalizeFirstLetter(),
                it.topicId,
                it.instructorName,
                it.description))
            .toList();

        store.dispatch(UpdateAllRecentAssignment(
            allRecentAssignment: allTopicsForSubject));
      } else {
        store.dispatch(UpdateAllRecentAssignment(allRecentAssignment: []));
      }
    } catch (error) {
      store.dispatch(UpdateAllRecentAssignment(allRecentAssignment: []));
    }
  };
}
