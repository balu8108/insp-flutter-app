// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:toastification/toastification.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:insp/apiservices/remote_data_source.dart';
import 'package:insp/utils/userDetail/getUserDetail.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'delete_assignment_redux.freezed.dart';

@freezed
class DeleteAssignmentAppState with _$DeleteAssignmentAppState {
  const factory DeleteAssignmentAppState({required int assignmentId}) =
      _DeleteAssignmentAppState;
}

sealed class DeleteAssignmentAction {}

class UpdateAssignemntId extends DeleteAssignmentAction {
  int id;
  UpdateAssignemntId({required this.id});
}

DeleteAssignmentAppState _deleteAssignmentStateReducer(
    DeleteAssignmentAppState state, DeleteAssignmentAction action) {
  switch (action) {
    case UpdateAssignemntId():
      return state.copyWith(assignmentId: action.id);
  }
}

DeleteAssignmentAppState deleteAssignmentStateReducer(
    DeleteAssignmentAppState state, dynamic action) {
  var upState = _deleteAssignmentStateReducer(state, action);
  return upState;
}

ThunkAction<DeleteAssignmentAppState> deleteAssignment(BuildContext context,
    int assignmentId, Function() fetchAssignmentAfterUpdateorDelete) {
  return (Store<DeleteAssignmentAppState> store) async {
    try {
      String userToken = getUserToken(context);
      final remoteDataSource = RemoteDataSource();
      final deleteTopicData =
          await remoteDataSource.deleteAssignment(assignmentId, userToken);

      if (deleteTopicData.response.statusCode == 200) {
        fetchAssignmentAfterUpdateorDelete();
        Navigator.of(context).pop();
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.success,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Assignment Deleted Succesfully'),
          alignment: Alignment.topRight,
        );
      } else {
        Navigator.of(context).pop();
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.warning,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Some issue, please try again'),
          alignment: Alignment.topRight,
        );
      }
    } catch (error) {
      Navigator.of(context).pop();
      toastification.show(
        context: context, // optional if you use ToastificationWrapper
        type: ToastificationType.error,
        style: ToastificationStyle.fillColored,
        autoCloseDuration: const Duration(seconds: 3),
        title: const Text('Some issue, please try again'),
        alignment: Alignment.topRight,
      );
    }
  };
}
