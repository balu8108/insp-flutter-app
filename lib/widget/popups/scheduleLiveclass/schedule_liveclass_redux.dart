// This file is "main.dart"
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/apiservices/models/library/all_topic_for_chapter_request_model.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:inspflutterfrontend/data/hardcoded/topic_list.dart';
import 'package:inspflutterfrontend/utils/getUserDetail.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'schedule_liveclass_redux.freezed.dart';

@freezed
class ScheduleLiveclassAppState with _$ScheduleLiveclassAppState {
  const factory ScheduleLiveclassAppState(
      [@Default('') String? selectedSubject,
      @Default('') String? selectedDate,
      @Default('') String? selectedStartTime,
      @Default('') String? selectedEndTime,
      @Default('') String? selectedChapter,
      @Default('') String? selectedTopic,
      @Default('') String? selectedClassLevel,
      @Default('') String? selectedCourseType,
      @Default('') String? lectureNo,
      @Default('') String? agenda,
      @Default('') String? description,
      @Default([]) List<ChapterTopicModel> allTopics,
      @Default([]) List<String> pickedFilesName,
      @Default([]) List<PlatformFile> pickedFiles,
      @Default(false) bool isStudentMuted]) = _ScheduleLiveclassAppState;
}

sealed class ScheduleLiveclassAction {}

class UpdateLiveClassSelectedSubject extends ScheduleLiveclassAction {
  String? selectedSubject;
  UpdateLiveClassSelectedSubject({required this.selectedSubject});
}

class UpdateAllTopics extends ScheduleLiveclassAction {
  List<ChapterTopicModel> allTopics;
  UpdateAllTopics({required this.allTopics});
}

class UpdateSelectedTopic extends ScheduleLiveclassAction {
  String? selectedTopic;
  UpdateSelectedTopic({required this.selectedTopic});
}

class UpdateLiveClassSelectedDate extends ScheduleLiveclassAction {
  String? selectedDate;
  UpdateLiveClassSelectedDate({required this.selectedDate});
}

class UpdateLiveClassSelectedStartTime extends ScheduleLiveclassAction {
  String? selectedStartTime;
  UpdateLiveClassSelectedStartTime({required this.selectedStartTime});
}

class UpdateLiveClassSelectedEndTime extends ScheduleLiveclassAction {
  String? selectedEndTime;
  UpdateLiveClassSelectedEndTime({required this.selectedEndTime});
}

class UpdateLiveClassSelectedChapter extends ScheduleLiveclassAction {
  String? selectedChapter;
  UpdateLiveClassSelectedChapter({required this.selectedChapter});
}

class UpdateLiveClassSelectedClassLevel extends ScheduleLiveclassAction {
  String? selectedClassLevel;
  UpdateLiveClassSelectedClassLevel({required this.selectedClassLevel});
}

class UpdateLiveClassSelectedCourseType extends ScheduleLiveclassAction {
  String? selectedCourseType;
  UpdateLiveClassSelectedCourseType({required this.selectedCourseType});
}

class UpdateLiveClassLectureNo extends ScheduleLiveclassAction {
  String? lectureNo;
  UpdateLiveClassLectureNo({required this.lectureNo});
}

class UpdateLiveClassAgenda extends ScheduleLiveclassAction {
  String? agenda;
  UpdateLiveClassAgenda({required this.agenda});
}

class UpdateLiveClassDescription extends ScheduleLiveclassAction {
  String description;
  UpdateLiveClassDescription({required this.description});
}

class UpdateLiveClassPickedFiles extends ScheduleLiveclassAction {
  List<PlatformFile> pickedFiles;
  UpdateLiveClassPickedFiles({required this.pickedFiles});
}

class UpdateLiveClassPickedFilesName extends ScheduleLiveclassAction {
  List<String> pickedFilesName;
  UpdateLiveClassPickedFilesName({required this.pickedFilesName});
}

class UpdateLiveClassIsStudentMuted extends ScheduleLiveclassAction {
  bool isStudentMuted;
  UpdateLiveClassIsStudentMuted({required this.isStudentMuted});
}

class RemoveLiveClassFile extends ScheduleLiveclassAction {
  String filename;
  RemoveLiveClassFile({required this.filename});
}

ScheduleLiveclassAppState _scheduleLiveclassStateReducer(
    ScheduleLiveclassAppState state, ScheduleLiveclassAction action) {
  switch (action) {
    case UpdateLiveClassSelectedSubject():
      return state.copyWith(selectedSubject: action.selectedSubject);
    case UpdateAllTopics():
      return state.copyWith(allTopics: action.allTopics);
    case UpdateSelectedTopic():
      return state.copyWith(selectedTopic: action.selectedTopic);
    case UpdateLiveClassSelectedDate():
      return state.copyWith(selectedDate: action.selectedDate);
    case UpdateLiveClassSelectedStartTime():
      return state.copyWith(selectedStartTime: action.selectedStartTime);
    case UpdateLiveClassSelectedEndTime():
      return state.copyWith(selectedEndTime: action.selectedEndTime);
    case UpdateLiveClassSelectedChapter():
      return state.copyWith(selectedChapter: action.selectedChapter);
    case UpdateLiveClassSelectedClassLevel():
      return state.copyWith(selectedClassLevel: action.selectedClassLevel);
    case UpdateLiveClassSelectedCourseType():
      return state.copyWith(selectedCourseType: action.selectedCourseType);
    case UpdateLiveClassLectureNo():
      return state.copyWith(lectureNo: action.lectureNo);
    case UpdateLiveClassAgenda():
      return state.copyWith(agenda: action.agenda);
    case UpdateLiveClassDescription():
      return state.copyWith(description: action.description);
    case UpdateLiveClassPickedFiles():
      return state.copyWith(pickedFiles: action.pickedFiles);
    case UpdateLiveClassPickedFilesName():
      return state.copyWith(pickedFilesName: action.pickedFilesName);
    case UpdateLiveClassIsStudentMuted():
      return state.copyWith(isStudentMuted: action.isStudentMuted);
    case RemoveLiveClassFile():
      return state.copyWith(
        pickedFilesName: state.pickedFilesName
            .where((name) => name != action.filename)
            .toList(),
        pickedFiles: state.pickedFiles
            .where((file) => file.name != action.filename)
            .toList(),
      );
  }
}

ScheduleLiveclassAppState scheduleLiveclassStateReducer(
    ScheduleLiveclassAppState state, dynamic action) {
  var upState = _scheduleLiveclassStateReducer(state, action);
  return upState;
}

ThunkAction<ScheduleLiveclassAppState> pickFilesforliveclass(
    BuildContext context) {
  return (Store<ScheduleLiveclassAppState> store) async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        allowMultiple: true,
        type: FileType.custom,
        allowedExtensions: ['pdf'],
      );

      if (result != null) {
        List<PlatformFile> pickedFiles = result.files;
        List<String> pickedFilesName =
            pickedFiles.map((item) => item.name).toList();
        store.dispatch(UpdateLiveClassPickedFiles(pickedFiles: pickedFiles));
        store.dispatch(
            UpdateLiveClassPickedFilesName(pickedFilesName: pickedFilesName));
      } else {
        print('User canceled the picker');
      }
    } catch (e) {
      print('Error picking file: $e');
    }
  };
}

ThunkAction<ScheduleLiveclassAppState> showTopicsforLiveClassByChapter(
    BuildContext context, String? newValue) {
  return (Store<ScheduleLiveclassAppState> store) async {
    try {
      store.dispatch(UpdateSelectedTopic(selectedTopic: ''));
      store.dispatch(UpdateLiveClassSelectedChapter(selectedChapter: newValue));
      var chapterId =
          chapter.firstWhere((item) => item.label == newValue).value;

      final remoteDataSource = RemoteDataSource();
      final allTopics = await remoteDataSource.getAllTopicsByChapter(
          AllTopicsForChapterRequestModel(
              secret_key: "U5Ga0Z1aaNlYHp0MjdEdXJ1aKVVVB1TP",
              chapter_id: chapterId));

      if (allTopics.response.statusCode == 201 &&
          allTopics.data.status == true) {
        final List<ChapterTopicModel> allTopicsForSubject = allTopics
            .data.physicsCourseTopicsResponseModelResult
            .map((it) => ChapterTopicModel(value: it.id, label: it.name))
            .toList();

        store.dispatch(UpdateAllTopics(allTopics: allTopicsForSubject));
      } else {
        store.dispatch(UpdateAllTopics(allTopics: []));
      }
    } catch (error) {
      store.dispatch(UpdateAllTopics(allTopics: []));
    }
  };
}

ThunkAction<ScheduleLiveclassAppState> handleCreateLiveClass(
    BuildContext context) {
  return (Store<ScheduleLiveclassAppState> store) async {
    List<MultipartFile> files = [];

    for (PlatformFile file in store.state.pickedFiles) {
      if (kIsWeb || MediaQuery.of(context).size.width >= 600) {
        files.add(MultipartFile.fromBytes(file.bytes!, filename: file.name));
      } else {
        files
            .add(await MultipartFile.fromFile(file.path!, filename: file.name));
      }
    }
    Map<String, dynamic> jsonObject = {
      'value': subjectList
          .firstWhere((item) => item.label == store.state.selectedSubject)
          .value,
      'label': store.state.selectedSubject,
    };

    // Map<String, dynamic> jsonObjectTwo = {
    //   'value': topicList
    //       .firstWhere((item) => item.label == store.state.selectedTopic)
    //       .value,
    //   'label': store.state.selectedTopic,
    // };

    FormData formData = FormData.fromMap({
      // classType: CRASHCOURSE
      // topic: {"value":"36","label":"ALTERNATING CURRENT "}
      // chapter: {"value":"8","label":"ELECTRO-MAGNETISM"}
      // classId: undefined
      // subject: {"value":"1","label":"PHYSICS"}
      // classLevel: Foundation_Olympiad
      // scheduledDate: 2024-08-13
      // scheduledStartTime: 13:00
      // scheduledEndTime: 14:01
      // agenda: test
      // lectureNo: 12
      // description: test
      // muteAllStudents: true
      // blockStudentsCamera: false
      'subject': jsonEncode(jsonObject),
      // 'topic': jsonEncode(jsonObjectTwo),
      'description': store.state.description,
      'files': files,
    });

    final dio = Dio();
    try {
      String userToken = await getUserToken();
      Response response = await dio.post(
        'https://dev.insp.1labventures.in/schedule-live-class/create',
        data: formData,
        options: Options(
          headers: {
            'Authorization': userToken, // Include the token in the header
            'Content-Type': 'multipart/form-data',
          },
        ),
      );

      if (response.statusCode == 201) {
        Navigator.of(context).pop();
        Fluttertoast.showToast(
            msg: 'Class Scheduled successfully',
            toastLength: Toast.LENGTH_LONG,
            backgroundColor: const Color(0xFF3C8DBC),
            timeInSecForIosWeb: 1,
            fontSize: 20.0);
      } else {
        Navigator.of(context).pop();
        Fluttertoast.showToast(
            msg: 'Failed to create class',
            toastLength: Toast.LENGTH_LONG,
            backgroundColor: const Color(0xFF3C8DBC),
            timeInSecForIosWeb: 1,
            fontSize: 20.0);
      }
    } catch (e) {
      Fluttertoast.showToast(
          msg: 'Some issue, please try again',
          toastLength: Toast.LENGTH_LONG,
          backgroundColor: const Color(0xFF3C8DBC),
          timeInSecForIosWeb: 1,
          fontSize: 20.0);
    }
  };
}
