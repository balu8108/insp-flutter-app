// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/pages/common/livestream/models/polldata_model.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:toastification/toastification.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'question_generate_redux.freezed.dart';

@freezed
class QuestionGenerateAppState with _$QuestionGenerateAppState {
  const factory QuestionGenerateAppState({
    @Default('') String? questionType,
    @Default('') String? questionTypeError,
    @Default(0) int? questionNo,
    @Default('') String? questionNoError,
    @Default(0) int? time,
    @Default('') String? timeError,
    @Default(4) int? noOfOptions,
    @Default('') String? noOfOptionsError,
    @Default([]) List<String> correctAnswers,
    @Default([]) List<String> dropdownItem,
    @Default('') String? correctAnswersError,
  }) = _QuestionGenerateAppState;
}

sealed class QuestionGenerateAction {}

class UpdateQuestionType extends QuestionGenerateAction {
  String? questionType;
  UpdateQuestionType({required this.questionType});
}

class UpdateQuestionTypeError extends QuestionGenerateAction {
  String? questionTypeError;
  UpdateQuestionTypeError({required this.questionTypeError});
}

class UpdateQuestionNo extends QuestionGenerateAction {
  int? questionNo;
  UpdateQuestionNo({required this.questionNo});
}

class UpdateQuestionNoError extends QuestionGenerateAction {
  String? questionNoError;
  UpdateQuestionNoError({required this.questionNoError});
}

class UpdateTime extends QuestionGenerateAction {
  int? time;
  UpdateTime({required this.time});
}

class UpdateTimeError extends QuestionGenerateAction {
  String? timeError;
  UpdateTimeError({required this.timeError});
}

class UpdateNoOfOptions extends QuestionGenerateAction {
  int? noOfOptions;
  UpdateNoOfOptions({required this.noOfOptions});
}

class Updatedropdown extends QuestionGenerateAction {
  List<String> dropdownItem;
  Updatedropdown({required this.dropdownItem});
}

class UpdateNoOfOptionsError extends QuestionGenerateAction {
  String? noOfOptionsError;
  UpdateNoOfOptionsError({required this.noOfOptionsError});
}

class UpdateCorrectAnswers extends QuestionGenerateAction {
  List<String> correctAnswers;
  UpdateCorrectAnswers({required this.correctAnswers});
}

class UpdateCorrectAnswersError extends QuestionGenerateAction {
  String? correctAnswersError;
  UpdateCorrectAnswersError({required this.correctAnswersError});
}

QuestionGenerateAppState _questionGenerateStateReducer(
    QuestionGenerateAppState state, QuestionGenerateAction action) {
  if (action is UpdateQuestionType) {
    return state.copyWith(questionType: action.questionType);
  } else if (action is UpdateQuestionTypeError) {
    return state.copyWith(questionTypeError: action.questionTypeError);
  } else if (action is UpdateQuestionNo) {
    return state.copyWith(questionNo: action.questionNo);
  } else if (action is UpdateQuestionNoError) {
    return state.copyWith(questionNoError: action.questionNoError);
  } else if (action is UpdateTime) {
    return state.copyWith(time: action.time);
  } else if (action is UpdateTimeError) {
    return state.copyWith(timeError: action.timeError);
  } else if (action is UpdateNoOfOptions) {
    return state.copyWith(noOfOptions: action.noOfOptions);
  } else if (action is UpdateNoOfOptionsError) {
    return state.copyWith(noOfOptionsError: action.noOfOptionsError);
  } else if (action is UpdateCorrectAnswers) {
    return state.copyWith(correctAnswers: action.correctAnswers);
  } else if (action is UpdateCorrectAnswersError) {
    return state.copyWith(correctAnswersError: action.correctAnswersError);
  } else if (action is Updatedropdown) {
    return state.copyWith(dropdownItem: action.dropdownItem);
  }
  return state;
}

QuestionGenerateAppState questionGenerateStateReducer(
    QuestionGenerateAppState state, dynamic action) {
  var upState = _questionGenerateStateReducer(state, action);
  return upState;
}

ThunkAction<QuestionGenerateAppState> questionGenerateapi(
  BuildContext context,
  Function(PollDataModel) sendPollToServer,
) {
  return (Store<QuestionGenerateAppState> store) async {
    try {
      // Example of using sendPollToServer
      PollDataModel pollData = PollDataModel(
        type: store.state.questionType ?? '',
        questionNo: store.state.questionNo ?? 0,
        correctAnswers: store.state.correctAnswers,
        noOfOptions: store.state.noOfOptions ?? 0,
        time: store.state.time ?? 0,
      );

      sendPollToServer(pollData);
      Navigator.of(context).pop();
    } catch (error) {
      Navigator.of(context).pop();
      toastification.show(
        context: context, // optional if you use ToastificationWrapper
        type: ToastificationType.error,
        style: ToastificationStyle.fillColored,
        autoCloseDuration: const Duration(seconds: 3),
        title: const Text('Some issue, please try again'),
        alignment: Alignment.topRight,
      );
    }
  };
}

ThunkAction<QuestionGenerateAppState> updateDropdownItems(
    BuildContext context, String input) {
  return (Store<QuestionGenerateAppState> store) async {
    try {
      if (store.state.questionType!.isNotEmpty && input.isNotEmpty) {
        if (store.state.questionType == 'mcq' ||
            store.state.questionType == 'poll') {
          final List<String> alphabets = List.generate(
              10, (index) => String.fromCharCode(65 + index)); // A to J
          int value = int.tryParse(input) ?? 0;
          if (value > 10) {
            store.dispatch(Updatedropdown(dropdownItem: ['No option']));
          } else if (value > 0) {
            store.dispatch(
                Updatedropdown(dropdownItem: alphabets.sublist(0, value)));
          } else {
            store.dispatch(Updatedropdown(dropdownItem: []));
          }
        }
      }
    } catch (error) {
      Navigator.of(context).pop();
      toastification.show(
        context: context, // optional if you use ToastificationWrapper
        type: ToastificationType.error,
        style: ToastificationStyle.fillColored,
        autoCloseDuration: const Duration(seconds: 3),
        title: const Text('Some issue, please try again'),
        alignment: Alignment.topRight,
      );
    }
  };
}
