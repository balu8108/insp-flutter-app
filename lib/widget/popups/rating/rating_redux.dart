// This file is "main.dart"
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/apiservices/models/feedback/rating_topic_request_model.dart';
import 'package:inspflutterfrontend/apiservices/remote_data_source.dart';
import 'package:inspflutterfrontend/utils/userDetail/getUserDetail.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:toastification/toastification.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'rating_redux.freezed.dart';

@freezed
class RatingAppState with _$RatingAppState {
  const factory RatingAppState({
    required int feedbackId,
    @Default(0.0) double rating,
    @Default('') String ratingError,
    @Default('') String feedback,
    @Default('') String feedbackError,
  }) = _RatingAppState;
}

sealed class RatingAction {}

class UpdateRating extends RatingAction {
  double rating;
  UpdateRating({required this.rating});
}

class UpdateRatingError extends RatingAction {
  String ratingError;
  UpdateRatingError({required this.ratingError});
}

class UpdateFeedback extends RatingAction {
  String feedback;
  UpdateFeedback({required this.feedback});
}

class UpdateFeedbackError extends RatingAction {
  String feedbackError;
  UpdateFeedbackError({required this.feedbackError});
}

RatingAppState _ratingStateReducer(RatingAppState state, RatingAction action) {
  if (action is UpdateRating) {
    return state.copyWith(rating: action.rating, ratingError: '');
  } else if (action is UpdateRatingError) {
    return state.copyWith(ratingError: action.ratingError);
  } else if (action is UpdateFeedback) {
    return state.copyWith(feedback: action.feedback, feedbackError: '');
  } else if (action is UpdateFeedbackError) {
    return state.copyWith(feedbackError: action.feedbackError);
  }
  return state;
}

RatingAppState ratingStateReducer(RatingAppState state, dynamic action) {
  var upState = _ratingStateReducer(state, action);
  return upState;
}

ThunkAction<RatingAppState> rateClass(BuildContext context) {
  return (Store<RatingAppState> store) async {
    try {
      final RatingTopicRequestModel ratingData = RatingTopicRequestModel(
          rating: store.state.rating.toInt(),
          topicId: store.state.feedbackId,
          feedback: store.state.feedback);

      String userToken = getUserToken(context);
      final remoteDataSource = RemoteDataSource();
      final ratingresponse =
          await remoteDataSource.postTopicRating(ratingData, userToken);

      if (ratingresponse.response.statusCode == 200) {
        Navigator.of(context).pop();
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.success,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Feedback created successfully'),
          alignment: Alignment.topRight,
        );
      } else {
        toastification.show(
          context: context, // optional if you use ToastificationWrapper
          type: ToastificationType.error,
          style: ToastificationStyle.fillColored,
          autoCloseDuration: const Duration(seconds: 3),
          title: const Text('Some issue, please try again'),
          alignment: Alignment.topRight,
        );
      }
    } catch (e) {
      Navigator.of(context).pop();
      print('Error picking file: $e');
    }
  };
}
