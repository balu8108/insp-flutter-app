// This file is "main.dart"
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:inspflutterfrontend/data/hardcoded/topic_list.dart';
import 'package:inspflutterfrontend/utils/getUserDetail.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'add_assignment_redux.freezed.dart';

@freezed
class AddAssignmentAppState with _$AddAssignmentAppState {
  const factory AddAssignmentAppState(
      [@Default('') String? selectedSubject,
      @Default('') String? selectedTopic,
      @Default('') String? description,
      @Default([]) List<String> pickedFilesName,
      @Default([]) List<PlatformFile> pickedFiles]) = _AddAssignmentAppState;
}

sealed class AddAssignmentAction {}

class UpdateSelectedSubject extends AddAssignmentAction {
  String? selectedSubject;
  UpdateSelectedSubject({required this.selectedSubject});
}

class UpdateSelectedTopic extends AddAssignmentAction {
  String? selectedTopic;
  UpdateSelectedTopic({required this.selectedTopic});
}

class UpdateDescription extends AddAssignmentAction {
  String description;
  UpdateDescription({required this.description});
}

class UpdatePickedFiles extends AddAssignmentAction {
  List<PlatformFile> pickedFiles;
  UpdatePickedFiles({required this.pickedFiles});
}

class UpdatePickedFilesName extends AddAssignmentAction {
  List<String> pickedFilesName;
  UpdatePickedFilesName({required this.pickedFilesName});
}

class RemoveFileAction extends AddAssignmentAction {
  String filename;
  RemoveFileAction({required this.filename});
}

AddAssignmentAppState _addAssignmentStateReducer(
    AddAssignmentAppState state, AddAssignmentAction action) {
  switch (action) {
    case UpdateSelectedSubject():
      return state.copyWith(selectedSubject: action.selectedSubject);
    case UpdateSelectedTopic():
      return state.copyWith(selectedTopic: action.selectedTopic);
    case UpdateDescription():
      return state.copyWith(description: action.description);
    case UpdatePickedFiles():
      return state.copyWith(pickedFiles: action.pickedFiles);
    case UpdatePickedFilesName():
      return state.copyWith(pickedFilesName: action.pickedFilesName);
    case RemoveFileAction():
      return state.copyWith(
        pickedFilesName: state.pickedFilesName
            .where((name) => name != action.filename)
            .toList(),
        pickedFiles: state.pickedFiles
            .where((file) => file.name != action.filename)
            .toList(),
      );
  }
}

AddAssignmentAppState addAssignmentStateReducer(
    AddAssignmentAppState state, dynamic action) {
  var upState = _addAssignmentStateReducer(state, action);
  return upState;
}

ThunkAction<AddAssignmentAppState> pickFiles(BuildContext context) {
  return (Store<AddAssignmentAppState> store) async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        allowMultiple: true,
        type: FileType.custom,
        allowedExtensions: ['pdf'],
      );

      if (result != null) {
        List<PlatformFile> pickedFiles = result.files;
        List<String> pickedFilesName =
            pickedFiles.map((item) => item.name).toList();
        store.dispatch(UpdatePickedFiles(pickedFiles: pickedFiles));
        store.dispatch(UpdatePickedFilesName(pickedFilesName: pickedFilesName));
      } else {
        print('User canceled the picker');
      }
    } catch (e) {
      print('Error picking file: $e');
    }
  };
}

ThunkAction<AddAssignmentAppState> handleCreate(BuildContext context) {
  return (Store<AddAssignmentAppState> store) async {
    List<MultipartFile> files = [];

    for (PlatformFile file in store.state.pickedFiles) {
      if (kIsWeb || MediaQuery.of(context).size.width >= 600) {
        files.add(MultipartFile.fromBytes(file.bytes!, filename: file.name));
      } else {
        files
            .add(await MultipartFile.fromFile(file.path!, filename: file.name));
      }
    }
    Map<String, dynamic> jsonObject = {
      'value': subjectList
          .firstWhere((item) => item.label == store.state.selectedSubject)
          .value,
      'label': store.state.selectedSubject,
    };

    Map<String, dynamic> jsonObjectTwo = {
      'value': topicList
          .firstWhere((item) => item.label == store.state.selectedTopic)
          .value,
      'label': store.state.selectedTopic,
    };

    FormData formData = FormData.fromMap({
      'subject': jsonEncode(jsonObject),
      'topic': jsonEncode(jsonObjectTwo),
      'description': store.state.description,
      'files': files,
    });

    final dio = Dio();
    try {
      String userToken = await getUserToken();
      Response response = await dio.post(
        'https://dev.insp.1labventures.in/assignment/upload-assignments',
        data: formData,
        options: Options(
          headers: {
            'Authorization': userToken, // Include the token in the header
            'Content-Type': 'multipart/form-data',
          },
        ),
      );

      if (response.statusCode == 201) {
        Navigator.of(context).pop();
        Fluttertoast.showToast(
            msg: 'Files uploaded successfully',
            toastLength: Toast.LENGTH_LONG,
            backgroundColor: const Color(0xFF3C8DBC),
            timeInSecForIosWeb: 1,
            fontSize: 20.0);
      } else {
        Navigator.of(context).pop();
        Fluttertoast.showToast(
            msg: 'Failed to upload files',
            toastLength: Toast.LENGTH_LONG,
            backgroundColor: const Color(0xFF3C8DBC),
            timeInSecForIosWeb: 1,
            fontSize: 20.0);
      }
    } catch (e) {
      Fluttertoast.showToast(
          msg: 'Some issue, please try again',
          toastLength: Toast.LENGTH_LONG,
          backgroundColor: const Color(0xFF3C8DBC),
          timeInSecForIosWeb: 1,
          fontSize: 20.0);
    }
  };
}
